vars:
# - metrics_configs.yaml:stages
- datachallenge.toml:pipelines,methods
- full_config.yaml:metrics,input_data


stages:
  update_config:
    cmd: |
      qf_alongtrack_metrics_from_map --cfg job | python scripts/wrap_yaml.py --key metrics > full_config.yaml
      qf_download_altimetry_constellation --cfg job | python scripts/wrap_yaml.py --key input_data >> full_config.yaml
    outs:
    - full_config.yaml:
        cache: false
  input_data/fetch_data:
    foreach: ${input_data.stages.sats}
    do:
      params:
      - datachallenge.toml:
        - pipelines.qf_download_altimetry_constellation
      - full_config.yaml:
        - input_data.stages._01_fetch_inference_tracks
      cmd: qf_download_altimetry_constellation 'to_run=[_01_fetch_inference_tracks]' stages._01_fetch_inference_tracks.sats=${item}
      outs:
      - data/downloads/input/${item}:
          cache: false
  input_data/filter_and_merge:
    foreach: ${input_data.stages.sats}
    do:
      params:
      - datachallenge.toml:
        - pipelines.qf_download_altimetry_constellation
      - full_config.yaml:
        - input_data.stages._02_filter_tracks
      cmd: >
        qf_download_altimetry_constellation
        'to_run=[_02_filter_tracks]'
        stages._02_filter_tracks.input_dir=data/downloads/input/${item}
        stages._02_filter_tracks.output_path=data/prepared/input/${item}.nc
      deps:
      - data/downloads/input/${item}
      outs:
      - data/prepared/input/${item}.nc
  diagnostics/method_output:
    foreach: ${methods}
    do:
      cmd: wget ${item.url} -nc -O 'data/downloads/method_outputs/${key}.nc'
      outs:
      - data/downloads/method_outputs/${key}.nc:
          cache: false
  diagnostics/fetch_reference_data:
    params:
    - datachallenge.toml:
      - pipelines.qf_alongtrack_metrics_from_map
    - full_config.yaml:
      - metrics.stages.dl_tracks
    cmd: qf_alongtrack_metrics_from_map 'to_run=[dl_tracks]'
    outs:
    - data/downloads/ref/c2:
        cache: false
  diagnostics/filter_and_merge_ref:
    params:
    - datachallenge.toml:
      - pipelines.qf_alongtrack_metrics_from_map
    - full_config.yaml:
      - metrics.stages.filter_and_merge
    cmd: qf_alongtrack_metrics_from_map 'to_run=[filter_and_merge]'
    deps:
    - data/downloads/ref/c2
    outs:
    - data/prepared/ref/c2.nc
  diagnostics/interp_on_track:
    foreach: ${methods}
    do:
      cmd: qf_alongtrack_metrics_from_map 'to_run=[interp_on_track]'
        'stages.interp_on_track.grid_var=${item.var}' 'stages.method=${key}'
      params:
      - datachallenge.toml:
        - pipelines.qf_alongtrack_metrics_from_map
      - full_config.yaml:
        - metrics.stages.interp_on_track
      deps:
      - data/prepared/ref/c2.nc
      - data/downloads/method_outputs/${key}.nc
      outs:
      - data/prepared/method_outputs/${key}_on_track.nc
  diagnostics/metric_lambdax:
    foreach: ${methods}
    do:
      cmd: qf_alongtrack_metrics_from_map 'to_run=[lambdax]'
        'stages.interp_on_track.grid_var=${item.var}' 'stages.method=${key}'
      params:
      - datachallenge.toml:
        - pipelines.qf_alongtrack_metrics_from_map
      - full_config.yaml:
        - metrics.stages.lambdax
      deps:
      - data/prepared/ref/c2.nc
      - data/prepared/method_outputs/${key}_on_track.nc
      outs:
      - data/prepared/method_outputs/psd_${key}.nc
      metrics:
      - data/metrics/lambdax_${key}.json:
          cache: false
  diagnostics/metric_mu:
    foreach: ${methods}
    do:
      cmd: qf_alongtrack_metrics_from_map 'to_run=[mu]'
        'stages.interp_on_track.grid_var=${item.var}' 'stages.method=${key}'
      params:
      - datachallenge.toml:
        - pipelines.qf_alongtrack_metrics_from_map
      - full_config.yaml:
        - metrics.stages.mu
      deps:
      - data/prepared/ref/c2.nc
      - data/prepared/method_outputs/${key}_on_track.nc
      metrics:
      - data/metrics/mu_${key}.json:
          cache: false
